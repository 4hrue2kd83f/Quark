import javax.swing.*
import java.awt.*
import java.awt.event.ActionEvent
import java.awt.event.ActionListener
import java.awt.event.KeyEvent
import java.awt.event.KeyListener
import java.util.concurrent.CountDownLatch

buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def archiveGroup = "vazkii"

version = "${mod_version}-${build_number}"
group = "vazkii.quark" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_name

if (System.getenv().BUILD_NUMBER != null) {
    version += ".${System.getenv().BUILD_NUMBER}"
}

repositories {
    maven {
        // for AutoRegLib
        name "blamejared"
        url "http://maven.blamejared.com/"
    }
    maven {
        // for JEI
        name = "promwml16"
        url "http://dvs1.progwml6.com/files/maven"
    }
}

dependencies {
    deobfCompile "vazkii.autoreglib:AutoRegLib:${arl_version}"
    deobfProvided "mezz.jei:jei_${mc_version}:${jei_version}:api"
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "eclipse/assets"

    coreMod = "vazkii.quark.base.asm.LoadingPlugin"

    mappings = mc_mappings
    replace 'GRADLE.BUILD', build_number
    replace 'GRADLE.VERSION', version

    // Scala: not even once
    replace 'scala.actors.threadpool.Arrays', 'java.util.Arrays'

    makeObfSourceJar = false
}

task checkBuild() {
    //Check if signing is enabled when building
    if (project.gradle.startParameter.taskNames.contains("build") && (!project.hasProperty('keyStore') || !project.hasProperty('storeAlias'))) {
        logger.log(LogLevel.WARN, 'Building without jarsigning! Please specify the keyStore and storeAlias property to enable!')
    }
}

def signPass
task setupKeys() {
    onlyIf {
        project.hasProperty('keyStore')
    }
    if (project.hasProperty('keyStore')) {
        def gui = new SimplePasswordQuery()
        gui.latch.await()
        signPass = gui.getPasswordAndDiscard()
    }
}

reobf {
    coreJar {mappingType = 'SEARGE'}
}

def coremodFiles = 'vazkii/quark/base/asm/**'

task coreJar(type: Jar) {
    from(sourceSets.main.output) {
        include coremodFiles
    }
    manifest {
        attributes "FMLCorePlugin": "vazkii.quark.base.asm.LoadingPlugin"
        attributes 'Maven-Artifact': archiveGroup+':'+archivesBaseName+'-core:'+version
    }

    classifier 'core'
    group = 'build'
}

task signCoreJar(type: SignJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }
    dependsOn reobfCoreJar
    if (project.hasProperty('keyStore')) { // This needs to be a path to the keystore file
        keyStore = project.keyStore
        alias = project.storeAlias
        storePass = signPass
        keyPass = signPass
        inputFile = coreJar.archivePath
        outputFile = coreJar.archivePath
    }
}

task signMainJar(type: SignJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }
    dependsOn reobfJar
    if (project.hasProperty('keyStore')) { // This needs to be a path to the keystore file
        keyStore = project.keyStore
        alias = project.storeAlias
        storePass = signPass
        keyPass = signPass
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}

signMainJar.dependsOn setupKeys
signCoreJar.dependsOn setupKeys
build.dependsOn signMainJar
jar.dependsOn signCoreJar

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': mc_version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info', '**/psd/**'
    }
}

def libPrefix = 'META-INF/libraries'
jar {
    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
    exclude "**/unused"

    manifest {
        attributes 'ContainedDeps': libPrefix+'/'+coreJar.archivePath.name
        attributes 'Maven-Artifact': archiveGroup+':'+archivesBaseName+':'+version
    }
    exclude coremodFiles
    // Add the output of the mod JAR task to the main JAR for later extraction
    from(coreJar.archivePath.absolutePath) {
        include '*' // Due to the way Gradle's copy tasks work, we need this line for the JAR to get added
        into libPrefix
    }
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output)
    archiveName = "${baseName}-${version}-deobf.${extension}"
}

task srcJar(type: Jar) {
    from(sourceSets.main.java)
    classifier = 'sources'
    archiveName = "${baseName}-${version}-sources.${extension}"
}

task apiJar(type: Jar) {
    // Remove sources from the api jar when MinecraftForge/ForgeGradle#369 is fixed
    from(sourceSets.main.allJava)
    from(sourceSets.main.output)
    include 'vazkii/quark/api/**'

    classifier = 'api'
    archiveName = "${baseName}-${version}-api.${extension}"
}

artifacts {
    archives srcJar, apiJar
}
/**
 * Increments the buildnumber in your config file, and saves it
 */
task incrementBuildNumber {
    def isBuilding = project.gradle.startParameter.taskNames.contains("build")
    onlyIf {
        isBuilding
    }
    if (isBuilding) {
        doFirst {
            file("gradle.properties").withWriter {
                def props = new Properties()
                def reader = file("gradle.properties").newReader()
                props.load(reader)
                props.setProperty("build_number", ((build_number.toString().toInteger()) + 1).toString())
                props.store(it, "")
            }
        }
    }
}


import java.util.regex.Pattern

task sortArtifacts(type: Copy) {
    from jar.destinationDir
    into dir_output
    eachFile {
        def matcher = Pattern.compile(Pattern.quote("$mod_name-$version") + "-(\\w+)\\.jar").matcher(it.name)
        if (matcher.matches()) {
            def classifier = matcher.group('1')
            it.relativePath = it.relativePath.parent.append(false, classifier, it.name)
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            artifact apiJar
            artifact srcJar

            pom.withXml {
                if (asNode().get("dependencies").size() > 0) {
                    // Deobf deps are a bit broken on gradle 4.8+ with maven-publish, let's not put them there
                    asNode().remove(asNode().get("dependencies"))
                }
            }
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}


defaultTasks 'clean', 'build', 'sortArtifacts', 'incrementBuildNumber'

class SimplePasswordQuery implements ActionListener, KeyListener {
    private final CountDownLatch latch = new CountDownLatch(1)
    private final JFrame frame = new JFrame("KeySigner Password")
    private final JPanel login = new JPanel(new GridLayout(2, 1))
    private String password
    private JPasswordField field = new JPasswordField()

    SimplePasswordQuery() {
        frame.setContentPane(login)
        field.addKeyListener(this)
        login.add(field)
        JButton okBtn = new JButton("OK")
        okBtn.addActionListener(this)
        login.add(okBtn)
        frame.setMinimumSize(new Dimension(320, 200))
        frame.setVisible(true)
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE)
    }

    CountDownLatch getLatch() {
        return latch
    }

    String getPasswordAndDiscard() {
        String s = password
        frame.dispose()
        login.removeAll()
        password = null
        return s
    }

    private void checkPW() {
        password = new String(field.getPassword())
        if (password != "")
            latch.countDown()
        else
            JOptionPane.showMessageDialog(frame, "No password is not an option!")
    }

    @Override
    void actionPerformed(ActionEvent e) {
        checkPW()
    }

    @Override
    void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_ENTER)
            checkPW()
    }

    @Override
    void keyReleased(KeyEvent e) {}
    @Override
    void keyTyped(KeyEvent e) {}
}
